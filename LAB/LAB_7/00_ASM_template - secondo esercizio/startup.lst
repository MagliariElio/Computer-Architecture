


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ********************//**
    2 00000000         ; * @file     startup_LPC17xx.s
    3 00000000         ; * @brief    CMSIS Cortex-M3 Core Device Startup File f
                       or
    4 00000000         ; *           NXP LPC17xx Device Series
    5 00000000         ; * @version  V1.10
    6 00000000         ; * @date     06. April 2011
    7 00000000         ; *
    8 00000000         ; * @note
    9 00000000         ; * Copyright (C) 2009-2011 ARM Limited. All rights rese
                       rved.
   10 00000000         ; *
   11 00000000         ; * @par
   12 00000000         ; * ARM Limited (ARM) is supplying this software for use
                        with Cortex-M
   13 00000000         ; * processor based microcontrollers.  This file can be 
                       freely distributed
   14 00000000         ; * within development tools that are supporting such AR
                       M based processors.
   15 00000000         ; *
   16 00000000         ; * @par
   17 00000000         ; * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, W
                       HETHER EXPRESS, IMPLIED
   18 00000000         ; * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED
                        WARRANTIES OF
   19 00000000         ; * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
                        APPLY TO THIS SOFTWARE.
   20 00000000         ; * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR S
                       PECIAL, INCIDENTAL, OR
   21 00000000         ; * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   22 00000000         ; *
   23 00000000         ; ******************************************************
                       ************************/
   24 00000000         
   25 00000000         ; *------- <<< Use Configuration Wizard in Context Menu 
                       >>> ------------------
   26 00000000         
   27 00000000         ; <h> Stack Configuration
   28 00000000         ;   <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   29 00000000         ; </h>
   30 00000000         
   31 00000000 00000200 
                       Stack_Size
                               EQU              0x00000200
   32 00000000         
   33 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   34 00000000         Stack_Mem
                               SPACE            Stack_Size
   35 00000200         __initial_sp
   36 00000200         
   37 00000200         
   38 00000200         ; <h> Heap Configuration
   39 00000200         ;   <o>  Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   40 00000200         ; </h>
   41 00000200         
   42 00000200 00000000 
                       Heap_Size



ARM Macro Assembler    Page 2 


                               EQU              0x00000000
   43 00000200         
   44 00000200                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   45 00000000         __heap_base
   46 00000000         Heap_Mem
                               SPACE            Heap_Size
   47 00000000         __heap_limit
   48 00000000         
   49 00000000         
   50 00000000                 PRESERVE8
   51 00000000                 THUMB
   52 00000000         
   53 00000000         
   54 00000000         ; Vector Table Mapped to Address 0 at Reset
   55 00000000         
   56 00000000                 AREA             RESET, DATA, READONLY
   57 00000000                 EXPORT           __Vectors
   58 00000000         
   59 00000000 00000000 
                       __Vectors
                               DCD              __initial_sp ; Top of Stack
   60 00000004 00000000        DCD              Reset_Handler ; Reset Handler
   61 00000008 00000000        DCD              NMI_Handler ; NMI Handler
   62 0000000C 00000000        DCD              HardFault_Handler ; Hard Fault 
                                                            Handler
   63 00000010 00000000        DCD              MemManage_Handler 
                                                            ; MPU Fault Handler
                                                            
   64 00000014 00000000        DCD              BusFault_Handler 
                                                            ; Bus Fault Handler
                                                            
   65 00000018 00000000        DCD              UsageFault_Handler ; Usage Faul
                                                            t Handler
   66 0000001C 00000000        DCD              0           ; Reserved
   67 00000020 00000000        DCD              0           ; Reserved
   68 00000024 00000000        DCD              0           ; Reserved
   69 00000028 00000000        DCD              0           ; Reserved
   70 0000002C 00000000        DCD              SVC_Handler ; SVCall Handler
   71 00000030 00000000        DCD              DebugMon_Handler ; Debug Monito
                                                            r Handler
   72 00000034 00000000        DCD              0           ; Reserved
   73 00000038 00000000        DCD              PendSV_Handler ; PendSV Handler
                                                            
   74 0000003C 00000000        DCD              SysTick_Handler 
                                                            ; SysTick Handler
   75 00000040         
   76 00000040         ; External Interrupts
   77 00000040 00000000        DCD              WDT_IRQHandler ; 16: Watchdog T
                                                            imer
   78 00000044 00000000        DCD              TIMER0_IRQHandler ; 17: Timer0
   79 00000048 00000000        DCD              TIMER1_IRQHandler ; 18: Timer1
   80 0000004C 00000000        DCD              TIMER2_IRQHandler ; 19: Timer2
   81 00000050 00000000        DCD              TIMER3_IRQHandler ; 20: Timer3
   82 00000054 00000000        DCD              UART0_IRQHandler ; 21: UART0
   83 00000058 00000000        DCD              UART1_IRQHandler ; 22: UART1
   84 0000005C 00000000        DCD              UART2_IRQHandler ; 23: UART2
   85 00000060 00000000        DCD              UART3_IRQHandler ; 24: UART3
   86 00000064 00000000        DCD              PWM1_IRQHandler ; 25: PWM1



ARM Macro Assembler    Page 3 


   87 00000068 00000000        DCD              I2C0_IRQHandler ; 26: I2C0
   88 0000006C 00000000        DCD              I2C1_IRQHandler ; 27: I2C1
   89 00000070 00000000        DCD              I2C2_IRQHandler ; 28: I2C2
   90 00000074 00000000        DCD              SPI_IRQHandler ; 29: SPI
   91 00000078 00000000        DCD              SSP0_IRQHandler ; 30: SSP0
   92 0000007C 00000000        DCD              SSP1_IRQHandler ; 31: SSP1
   93 00000080 00000000        DCD              PLL0_IRQHandler ; 32: PLL0 Lock
                                                             (Main PLL)
   94 00000084 00000000        DCD              RTC_IRQHandler ; 33: Real Time 
                                                            Clock
   95 00000088 00000000        DCD              EINT0_IRQHandler ; 34: External
                                                             Interrupt 0
   96 0000008C 00000000        DCD              EINT1_IRQHandler ; 35: External
                                                             Interrupt 1
   97 00000090 00000000        DCD              EINT2_IRQHandler ; 36: External
                                                             Interrupt 2
   98 00000094 00000000        DCD              EINT3_IRQHandler ; 37: External
                                                             Interrupt 3
   99 00000098 00000000        DCD              ADC_IRQHandler 
                                                            ; 38: A/D Converter
                                                            
  100 0000009C 00000000        DCD              BOD_IRQHandler ; 39: Brown-Out 
                                                            Detect
  101 000000A0 00000000        DCD              USB_IRQHandler ; 40: USB
  102 000000A4 00000000        DCD              CAN_IRQHandler ; 41: CAN
  103 000000A8 00000000        DCD              DMA_IRQHandler ; 42: General Pu
                                                            rpose DMA
  104 000000AC 00000000        DCD              I2S_IRQHandler ; 43: I2S
  105 000000B0 00000000        DCD              ENET_IRQHandler ; 44: Ethernet
  106 000000B4 00000000        DCD              RIT_IRQHandler ; 45: Repetitive
                                                             Interrupt Timer
  107 000000B8 00000000        DCD              MCPWM_IRQHandler ; 46: Motor Co
                                                            ntrol PWM
  108 000000BC 00000000        DCD              QEI_IRQHandler ; 47: Quadrature
                                                             Encoder Interface
  109 000000C0 00000000        DCD              PLL1_IRQHandler ; 48: PLL1 Lock
                                                             (USB PLL)
  110 000000C4 00000000        DCD              USBActivity_IRQHandler ; 49: US
                                                            B Activity interrup
                                                            t to wakeup
  111 000000C8 00000000        DCD              CANActivity_IRQHandler ; 50: CA
                                                            N Activity interrup
                                                            t to wakeup
  112 000000CC         
  113 000000CC         
  114 000000CC                 IF               :LNOT::DEF:NO_CRP
  115 000000CC                 AREA             |.ARM.__at_0x02FC|, CODE, READO
NLY
  116 00000000 FFFFFFFF 
                       CRP_Key DCD              0xFFFFFFFF
  117 00000004                 ENDIF
  118 00000004         
  119 00000004                 AREA             MY_DATA, DATA, READWRITE, align
=3
  120 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 Calories_ordered
                               SPACE            6*4
  121 00000018 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Quantity_ordered
                               SPACE            6*4
  122 00000030         
  123 00000030         
  124 00000030         
  125 00000030                 AREA             |.text|, CODE, READONLY, align=
3
  126 00000000         
  127 00000000        0 
                       array   RN               R0          ;array to sort    a
                                                            rgument and result
  128 00000000        1 
                       len     RN               R1          ;len of array    ar
                                                            gument
  129 00000000        2 
                       temp_array
                               RN               R2          ;       argument
  130 00000000         
  131 00000000        3 
                       internal_len
                               RN               R3          ;       variable
  132 00000000        4 
                       i       RN               R4          ;index      variabl
                                                            e
  133 00000000        5 
                       j       RN               R5          ;index      variabl
                                                            e
  134 00000000        6 
                       value   RN               R6          ;       variable
  135 00000000        7 
                       next_value
                               RN               R7          ;       variable
  136 00000000         
  137 00000000        B 
                       max     RN               R11         ;max caloric ingred
                                                            ient  variable
  138 00000000         
  139 00000000         
  140 00000000         
  141 00000000         Reset_Handler
                               PROC
  142 00000000                 EXPORT           Reset_Handler             [WEAK
]
  143 00000000 485F            LDR              R0, =Reset_Handler
  144 00000002         
  145 00000002 F89F 1178       LDRB             len, Num_ingredients
  146 00000006         
  147 00000006 F04F 0401       MOV              i, #1       ;i = 1  index for I



ARM Macro Assembler    Page 5 


                                                            ngredient_calories
  148 0000000A F04F 0500       MOV              j, #0       ;j = 0  index for C
                                                            alories_ordered
  149 0000000E F04F 0B00       MOV              max, #0
  150 00000012         
  151 00000012 4A5C            LDR              temp_array, =Ingredient_calorie
s
  152 00000014 485C            LDR              array, =Calories_ordered
  153 00000016         loop_first_array
  154 00000016 F852 7024       LDR              next_value, [temp_array, i, LSL
 #2] 
                                                            ;get the value from
                                                             the array in ROM
  155 0000001A F840 7025       STR              next_value, [array, j, LSL #2] 
                                                            ;put the value in t
                                                            he array in RAM
  156 0000001E         
  157 0000001E         
  158 0000001E         ;put in the stack only what I want to preserve and I wil
                       l calculate the product
  159 0000001E B415            PUSH             {array, temp_array, i}
  160 00000020 F1A4 0401       SUB              i, #1
  161 00000024 F852 6024       LDR              value, [temp_array, i, LSL #2]
  162 00000028 4A58            LDR              temp_array, =Ingredient_quantit
y 
                                                            ;it is used in this
                                                             loop to search the
                                                             max value
  163 0000002A         
  164 0000002A F7FF FFFE       BL               Finder_value
  165 0000002E         
  166 0000002E FB07 F600       MUL              value, next_value, array ;value
                                                             = calories * quant
                                                            ity
  167 00000032         
  168 00000032 455E            CMP              value, max
  169 00000034 BF88 46B3       MOVHI            max, value
  170 00000038         
  171 00000038 BC15            POP              {array, temp_array, i}
  172 0000003A         
  173 0000003A         ;here I will continue with the normal loop
  174 0000003A F104 0402       ADD              i, #2
  175 0000003E F105 0501       ADD              j, #1
  176 00000042         
  177 00000042 EBB4 0F41       CMP              i, len, LSL #1
  178 00000046 D3E6            BLO              loop_first_array
  179 00000048         
  180 00000048 F7FF FFFE       BL               Sort        ;sort array
  181 0000004C         
  182 0000004C BF00            nop
  183 0000004E         
  184 0000004E F7FF FFFE       BL               Replace_ID  ;search the own id 
                                                            for each value in t
                                                            he sorted array
  185 00000052         
  186 00000052         
  187 00000052         ;repeat for the second array
  188 00000052 F04F 0401       MOV              i, #1
  189 00000056 F04F 0500       MOV              j, #0



ARM Macro Assembler    Page 6 


  190 0000005A 4A4C            LDR              temp_array, =Ingredient_quantit
y
  191 0000005C 484D            LDR              array, =Quantity_ordered
  192 0000005E         loop_second_array
  193 0000005E F852 6024       LDR              value, [temp_array, i, LSL #2] 
                                                            ;get the value from
                                                             the array in ROM
  194 00000062 F840 6025       STR              value, [array, j, LSL #2] ;put 
                                                            the value in the ar
                                                            ray in RAM
  195 00000066 F104 0402       ADD              i, #2
  196 0000006A F105 0501       ADD              j, #1
  197 0000006E         
  198 0000006E EBB4 0F41       CMP              i, len, LSL #1
  199 00000072 D3F4            BLO              loop_second_array
  200 00000074         
  201 00000074 F7FF FFFE       BL               Sort        ;sort array
  202 00000078 F7FF FFFE       BL               Replace_ID  ;search the own id 
                                                            for each value in t
                                                            he sorted array
  203 0000007C         
  204 0000007C 4700            BX               R0
  205 0000007E                 ENDP
  206 0000007E         
  207 0000007E         ;algorithm in C
  208 0000007E         ;void bubble_sort(int array[], int len) {
  209 0000007E         ;    for (int i = 0; i < len - 1; i++) {
  210 0000007E         ;        for (int j = 0; j < len - i - 1; j++) {
  211 0000007E         ;            if (array[j] < array[j + 1]) {
  212 0000007E         ;                int value = array[j + 1];
  213 0000007E         ;                array[j + 1] = array[j];
  214 0000007E         ;                array[j] = value;
  215 0000007E         ;            }
  216 0000007E         ;        }
  217 0000007E         ;    }
  218 0000007E         ;}
  219 0000007E         
  220 0000007E         ; @parameter:  array, len
  221 0000007E         Sort    PROC
  222 0000007E B5FB            PUSH             {LR, len, array, internal_len, 
i, j, value, next_value}
  223 00000080         
  224 00000080 F04F 34FF       MOV              i, #-1      ;i = -1
  225 00000084         external_loop
  226 00000084 F104 0401       ADD              i, #1
  227 00000088 428C            CMP              i, len
  228 0000008A D01C            BEQ              exit
  229 0000008C         
  230 0000008C EBA1 0304       SUB              internal_len, len, i ;internal_
                                                            len = len - i
  231 00000090 F1A1 0301       SUB              internal_len, len, #1 ;internal
                                                            _len = (len-i) - 1
  232 00000094 F04F 35FF       MOV              j, #-1      ;j = -1
  233 00000098         internal_loop
  234 00000098 F105 0501       ADD              j, #1
  235 0000009C 429D            CMP              j, internal_len
  236 0000009E D2F1            BHS              external_loop
  237 000000A0         
  238 000000A0 F850 6025       LDR              value, [array, j, LSL #2] 



ARM Macro Assembler    Page 7 


                                                            ;value = array[j]
  239 000000A4         
  240 000000A4 F105 0501       ADD              j, #1
  241 000000A8 F850 7025       LDR              next_value, [array, j, LSL #2] 
                                                            ;next_value = array
                                                            [j+1]
  242 000000AC F105 35FF       ADD              j, #-1
  243 000000B0         
  244 000000B0 42B7            CMP              next_value, value
  245 000000B2 D3F1            BLO              internal_loop
  246 000000B4         
  247 000000B4         ;LDR value, [array, j, LSL #2]   ;value = array[j]
  248 000000B4         ;LDR next_value, [array, j, LSL #2]  ;next_value = array
                       [j+1] 
  249 000000B4         
  250 000000B4 F840 7025       STR              next_value, [array, j, LSL #2] 
                                                            ;array[j] = array[j
                                                            +1]
  251 000000B8 F105 0501       ADD              j, #1
  252 000000BC F840 6025       STR              value, [array, j, LSL #2] ;arra
                                                            y[j+1] = array[j]
  253 000000C0 F105 35FF       ADD              j, #-1
  254 000000C4         
  255 000000C4         
  256 000000C4 E7E8            B                internal_loop
  257 000000C6         exit
  258 000000C6 BDFB            POP              {PC, len, array, internal_len, 
i, j, value, next_value}
  259 000000C8                 ENDP
  260 000000C8         
  261 000000C8         ; @parameter array, len, temp_array
  262 000000C8         Replace_ID
                               PROC
  263 000000C8 B5F7            PUSH             {LR, value, i, j, len, next_val
ue, temp_array, array}
  264 000000CA         
  265 000000CA F04F 34FF       MOV              i, #-1
  266 000000CE         loop_id
  267 000000CE F104 0401       ADD              i, #1
  268 000000D2 428C            CMP              i, len
  269 000000D4 D210            BHS              exit_loop_id
  270 000000D6         
  271 000000D6 F850 6024       LDR              value, [array, i, LSL #2] 
                                                            ;value = array[i]
  272 000000DA         
  273 000000DA F04F 35FF       MOV              j, #-1
  274 000000DE         internal_loop_id
  275 000000DE F105 0502       ADD              j, #2
  276 000000E2         
  277 000000E2 F852 7025       LDR              next_value, [temp_array, j, LSL
 #2]
  278 000000E6         
  279 000000E6 42BE            CMP              value, next_value
  280 000000E8 D1F9            BNE              internal_loop_id
  281 000000EA         
  282 000000EA F1A5 0501       SUB              j, #1
  283 000000EE F852 6025       LDR              value, [temp_array, j, LSL #2] 
                                                            ;ID from ROM
  284 000000F2 F840 6024       STR              value, [array, i, LSL #2] 



ARM Macro Assembler    Page 8 


                                                            ;ID in RAM
  285 000000F6         
  286 000000F6 E7EA            B                loop_id
  287 000000F8         exit_loop_id
  288 000000F8 BDF7            POP              {PC, value, i, j, len, next_val
ue, temp_array, array}
  289 000000FA                 ENDP
  290 000000FA         
  291 000000FA         
  292 000000FA         ; @parameter temp_array, len, value
  293 000000FA         ; @result array (value of key)
  294 000000FA         Finder_value
                               PROC
  295 000000FA B5D6            PUSH             {LR, len, i, value, temp_array,
 next_value}
  296 000000FC         
  297 000000FC F06F 0401       MOV              i, #-2      ;i = 0
  298 00000100         loop
  299 00000100 F104 0402       ADD              i, #2       ;i += 2
  300 00000104 EBB4 0F41       CMP              i, len, LSL #1 ;if(i >= len) go
                                                            to exit
  301 00000108 D207            BHS              exit_finder
  302 0000010A         
  303 0000010A F852 7024       LDR              next_value, [temp_array, i, LSL
 #2] 
                                                            ;next_value = temp_
                                                            array[i]
  304 0000010E 42BE            CMP              value, next_value ;if(value != 
                                                            next_value) goto LO
                                                            OP
  305 00000110         
  306 00000110 D1F6            BNE              loop
  307 00000112         
  308 00000112 F104 0401       ADD              i, #1
  309 00000116 F852 0024       LDR              array, [temp_array, i, LSL #2] 
                                                            ;value of key
  310 0000011A         
  311 0000011A         exit_finder
  312 0000011A BDD6            POP              {PC, len, i, value, temp_array,
 next_value}
  313 0000011C                 ENDP
  314 0000011C         
  315 0000011C 00000001 
              0000001E 
              00000002 
              00000046 
              00000003 
              000000C8 Ingredient_calories
                               DCD              0x01, 30, 0x02, 70, 0x03, 200
  316 00000134 00000004 
              0000002A 
              00000005 
              00000051 
              00000006 
              00000014         DCD              0x04, 42, 0x05, 81, 0x06, 20
  317 0000014C         
  318 0000014C 00000002 
              00000032 
              00000005 



ARM Macro Assembler    Page 9 


              00000003 
              00000003 
              0000000A 
              00000001 
              00000005 
              00000004 
              00000008 
              00000006 
              0000001E Ingredient_quantity
                               DCD              0x02, 50, 0x05, 3, 0x03, 10, 0x
01, 5, 0x04, 8, 0x06, 30
  319 0000017C         
  320 0000017C 06      Num_ingredients
                               DCB              6
  321 0000017D         
  322 0000017D 00 00 00 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         LTORG
  323 00000198         
  324 00000198         
  325 00000198         ; Dummy Exception Handlers (infinite loops which can be 
                       modified)
  326 00000198         
  327 00000198         NMI_Handler
                               PROC
  328 00000198                 EXPORT           NMI_Handler               [WEAK
]
  329 00000198 E7FE            B                .
  330 0000019A                 ENDP
  332 0000019A         HardFault_Handler
                               PROC
  333 0000019A                 EXPORT           HardFault_Handler         [WEAK
]
  334 0000019A E7FE            B                .
  335 0000019C                 ENDP
  337 0000019C         MemManage_Handler
                               PROC
  338 0000019C                 EXPORT           MemManage_Handler         [WEAK
]
  339 0000019C E7FE            B                .
  340 0000019E                 ENDP
  342 0000019E         BusFault_Handler
                               PROC
  343 0000019E                 EXPORT           BusFault_Handler          [WEAK
]
  344 0000019E E7FE            B                .
  345 000001A0                 ENDP
  347 000001A0         UsageFault_Handler
                               PROC
  348 000001A0                 EXPORT           UsageFault_Handler        [WEAK
]
  349 000001A0 E7FE            B                .
  350 000001A2                 ENDP
  351 000001A2         SVC_Handler
                               PROC



ARM Macro Assembler    Page 10 


  352 000001A2                 EXPORT           SVC_Handler               [WEAK
]
  353 000001A2 E7FE            B                .
  354 000001A4                 ENDP
  356 000001A4         DebugMon_Handler
                               PROC
  357 000001A4                 EXPORT           DebugMon_Handler          [WEAK
]
  358 000001A4 E7FE            B                .
  359 000001A6                 ENDP
  360 000001A6         PendSV_Handler
                               PROC
  361 000001A6                 EXPORT           PendSV_Handler            [WEAK
]
  362 000001A6 E7FE            B                .
  363 000001A8                 ENDP
  364 000001A8         SysTick_Handler
                               PROC
  365 000001A8                 EXPORT           SysTick_Handler           [WEAK
]
  366 000001A8 E7FE            B                .
  367 000001AA                 ENDP
  368 000001AA         
  369 000001AA         Default_Handler
                               PROC
  370 000001AA         
  371 000001AA                 EXPORT           WDT_IRQHandler            [WEAK
]
  372 000001AA                 EXPORT           TIMER0_IRQHandler         [WEAK
]
  373 000001AA                 EXPORT           TIMER1_IRQHandler         [WEAK
]
  374 000001AA                 EXPORT           TIMER2_IRQHandler         [WEAK
]
  375 000001AA                 EXPORT           TIMER3_IRQHandler         [WEAK
]
  376 000001AA                 EXPORT           UART0_IRQHandler          [WEAK
]
  377 000001AA                 EXPORT           UART1_IRQHandler          [WEAK
]
  378 000001AA                 EXPORT           UART2_IRQHandler          [WEAK
]
  379 000001AA                 EXPORT           UART3_IRQHandler          [WEAK
]
  380 000001AA                 EXPORT           PWM1_IRQHandler           [WEAK
]
  381 000001AA                 EXPORT           I2C0_IRQHandler           [WEAK
]
  382 000001AA                 EXPORT           I2C1_IRQHandler           [WEAK
]
  383 000001AA                 EXPORT           I2C2_IRQHandler           [WEAK
]
  384 000001AA                 EXPORT           SPI_IRQHandler            [WEAK
]
  385 000001AA                 EXPORT           SSP0_IRQHandler           [WEAK
]
  386 000001AA                 EXPORT           SSP1_IRQHandler           [WEAK
]
  387 000001AA                 EXPORT           PLL0_IRQHandler           [WEAK



ARM Macro Assembler    Page 11 


]
  388 000001AA                 EXPORT           RTC_IRQHandler            [WEAK
]
  389 000001AA                 EXPORT           EINT0_IRQHandler          [WEAK
]
  390 000001AA                 EXPORT           EINT1_IRQHandler          [WEAK
]
  391 000001AA                 EXPORT           EINT2_IRQHandler          [WEAK
]
  392 000001AA                 EXPORT           EINT3_IRQHandler          [WEAK
]
  393 000001AA                 EXPORT           ADC_IRQHandler            [WEAK
]
  394 000001AA                 EXPORT           BOD_IRQHandler            [WEAK
]
  395 000001AA                 EXPORT           USB_IRQHandler            [WEAK
]
  396 000001AA                 EXPORT           CAN_IRQHandler            [WEAK
]
  397 000001AA                 EXPORT           DMA_IRQHandler            [WEAK
]
  398 000001AA                 EXPORT           I2S_IRQHandler            [WEAK
]
  399 000001AA                 EXPORT           ENET_IRQHandler           [WEAK
]
  400 000001AA                 EXPORT           RIT_IRQHandler            [WEAK
]
  401 000001AA                 EXPORT           MCPWM_IRQHandler          [WEAK
]
  402 000001AA                 EXPORT           QEI_IRQHandler            [WEAK
]
  403 000001AA                 EXPORT           PLL1_IRQHandler           [WEAK
]
  404 000001AA                 EXPORT           USBActivity_IRQHandler    [WEAK
]
  405 000001AA                 EXPORT           CANActivity_IRQHandler    [WEAK
]
  406 000001AA         
  407 000001AA         WDT_IRQHandler
  408 000001AA         TIMER0_IRQHandler
  409 000001AA         TIMER1_IRQHandler
  410 000001AA         TIMER2_IRQHandler
  411 000001AA         TIMER3_IRQHandler
  412 000001AA         UART0_IRQHandler
  413 000001AA         UART1_IRQHandler
  414 000001AA         UART2_IRQHandler
  415 000001AA         UART3_IRQHandler
  416 000001AA         PWM1_IRQHandler
  417 000001AA         I2C0_IRQHandler
  418 000001AA         I2C1_IRQHandler
  419 000001AA         I2C2_IRQHandler
  420 000001AA         SPI_IRQHandler
  421 000001AA         SSP0_IRQHandler
  422 000001AA         SSP1_IRQHandler
  423 000001AA         PLL0_IRQHandler
  424 000001AA         RTC_IRQHandler
  425 000001AA         EINT0_IRQHandler
  426 000001AA         EINT1_IRQHandler
  427 000001AA         EINT2_IRQHandler



ARM Macro Assembler    Page 12 


  428 000001AA         EINT3_IRQHandler
  429 000001AA         ADC_IRQHandler
  430 000001AA         BOD_IRQHandler
  431 000001AA         USB_IRQHandler
  432 000001AA         CAN_IRQHandler
  433 000001AA         DMA_IRQHandler
  434 000001AA         I2S_IRQHandler
  435 000001AA         ENET_IRQHandler
  436 000001AA         RIT_IRQHandler
  437 000001AA         MCPWM_IRQHandler
  438 000001AA         QEI_IRQHandler
  439 000001AA         PLL1_IRQHandler
  440 000001AA         USBActivity_IRQHandler
  441 000001AA         CANActivity_IRQHandler
  442 000001AA         
  443 000001AA E7FE            B                .
  444 000001AC         
  445 000001AC                 ENDP
  446 000001AC         
  447 000001AC         
  448 000001AC                 ALIGN
  449 000001AC         
  450 000001AC         
  451 000001AC         ; User Initial Stack & Heap
  452 000001AC         
  453 000001AC                 EXPORT           __initial_sp
  454 000001AC                 EXPORT           __heap_base
  455 000001AC                 EXPORT           __heap_limit
  456 000001AC         
  457 000001AC                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\startup.d -o.\startup.o -I.\RTE\_Target_1 -IC:\Users\eliom\AppDa
ta\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\eliom\AppData\
Local\Arm\Packs\Keil\LPC1700_DFP\2.7.1\Device\Include --predefine="__EVAL SETA 
1" --predefine="__UVISION_VERSION SETA 536" --predefine="_RTE_ SETA 1" --predef
ine="LPC175x_6x SETA 1" --predefine="_RTE_ SETA 1" --list=.\startup.lst startup
.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 33 in file startup.s
   Uses
      None
Comment: STACK unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 34 in file startup.s
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000200

Symbol: __initial_sp
   Definitions
      At line 35 in file startup.s
   Uses
      At line 59 in file startup.s
      At line 453 in file startup.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 44 in file startup.s
   Uses
      None
Comment: HEAP unused
Heap_Mem 00000000

Symbol: Heap_Mem
   Definitions
      At line 46 in file startup.s
   Uses
      None
Comment: Heap_Mem unused
__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 45 in file startup.s
   Uses
      At line 454 in file startup.s
Comment: __heap_base used once
__heap_limit 00000000

Symbol: __heap_limit
   Definitions
      At line 47 in file startup.s
   Uses
      At line 455 in file startup.s
Comment: __heap_limit used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 56 in file startup.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 59 in file startup.s
   Uses
      At line 57 in file startup.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x02FC 00000000

Symbol: .ARM.__at_0x02FC
   Definitions
      At line 115 in file startup.s
   Uses
      None
Comment: .ARM.__at_0x02FC unused
CRP_Key 00000000

Symbol: CRP_Key
   Definitions
      At line 116 in file startup.s
   Uses
      None
Comment: CRP_Key unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Calories_ordered 00000000

Symbol: Calories_ordered
   Definitions
      At line 120 in file startup.s
   Uses
      At line 152 in file startup.s
Comment: Calories_ordered used once
MY_DATA 00000000

Symbol: MY_DATA
   Definitions
      At line 119 in file startup.s
   Uses
      None
Comment: MY_DATA unused
Quantity_ordered 00000018

Symbol: Quantity_ordered
   Definitions
      At line 121 in file startup.s
   Uses
      At line 191 in file startup.s
Comment: Quantity_ordered used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 125 in file startup.s
   Uses
      None
Comment: .text unused
ADC_IRQHandler 000001AA

Symbol: ADC_IRQHandler
   Definitions
      At line 429 in file startup.s
   Uses
      At line 99 in file startup.s
      At line 393 in file startup.s

BOD_IRQHandler 000001AA

Symbol: BOD_IRQHandler
   Definitions
      At line 430 in file startup.s
   Uses
      At line 100 in file startup.s
      At line 394 in file startup.s

BusFault_Handler 0000019E

Symbol: BusFault_Handler
   Definitions
      At line 342 in file startup.s
   Uses
      At line 64 in file startup.s
      At line 343 in file startup.s

CANActivity_IRQHandler 000001AA

Symbol: CANActivity_IRQHandler
   Definitions
      At line 441 in file startup.s
   Uses
      At line 111 in file startup.s
      At line 405 in file startup.s

CAN_IRQHandler 000001AA

Symbol: CAN_IRQHandler
   Definitions
      At line 432 in file startup.s
   Uses
      At line 102 in file startup.s
      At line 396 in file startup.s

DMA_IRQHandler 000001AA

Symbol: DMA_IRQHandler
   Definitions
      At line 433 in file startup.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 103 in file startup.s
      At line 397 in file startup.s

DebugMon_Handler 000001A4

Symbol: DebugMon_Handler
   Definitions
      At line 356 in file startup.s
   Uses
      At line 71 in file startup.s
      At line 357 in file startup.s

Default_Handler 000001AA

Symbol: Default_Handler
   Definitions
      At line 369 in file startup.s
   Uses
      None
Comment: Default_Handler unused
EINT0_IRQHandler 000001AA

Symbol: EINT0_IRQHandler
   Definitions
      At line 425 in file startup.s
   Uses
      At line 95 in file startup.s
      At line 389 in file startup.s

EINT1_IRQHandler 000001AA

Symbol: EINT1_IRQHandler
   Definitions
      At line 426 in file startup.s
   Uses
      At line 96 in file startup.s
      At line 390 in file startup.s

EINT2_IRQHandler 000001AA

Symbol: EINT2_IRQHandler
   Definitions
      At line 427 in file startup.s
   Uses
      At line 97 in file startup.s
      At line 391 in file startup.s

EINT3_IRQHandler 000001AA

Symbol: EINT3_IRQHandler
   Definitions
      At line 428 in file startup.s
   Uses
      At line 98 in file startup.s
      At line 392 in file startup.s

ENET_IRQHandler 000001AA

Symbol: ENET_IRQHandler



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 435 in file startup.s
   Uses
      At line 105 in file startup.s
      At line 399 in file startup.s

Finder_value 000000FA

Symbol: Finder_value
   Definitions
      At line 294 in file startup.s
   Uses
      At line 164 in file startup.s
Comment: Finder_value used once
HardFault_Handler 0000019A

Symbol: HardFault_Handler
   Definitions
      At line 332 in file startup.s
   Uses
      At line 62 in file startup.s
      At line 333 in file startup.s

I2C0_IRQHandler 000001AA

Symbol: I2C0_IRQHandler
   Definitions
      At line 417 in file startup.s
   Uses
      At line 87 in file startup.s
      At line 381 in file startup.s

I2C1_IRQHandler 000001AA

Symbol: I2C1_IRQHandler
   Definitions
      At line 418 in file startup.s
   Uses
      At line 88 in file startup.s
      At line 382 in file startup.s

I2C2_IRQHandler 000001AA

Symbol: I2C2_IRQHandler
   Definitions
      At line 419 in file startup.s
   Uses
      At line 89 in file startup.s
      At line 383 in file startup.s

I2S_IRQHandler 000001AA

Symbol: I2S_IRQHandler
   Definitions
      At line 434 in file startup.s
   Uses
      At line 104 in file startup.s
      At line 398 in file startup.s




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Ingredient_calories 0000011C

Symbol: Ingredient_calories
   Definitions
      At line 315 in file startup.s
   Uses
      At line 151 in file startup.s
Comment: Ingredient_calories used once
Ingredient_quantity 0000014C

Symbol: Ingredient_quantity
   Definitions
      At line 318 in file startup.s
   Uses
      At line 162 in file startup.s
      At line 190 in file startup.s

MCPWM_IRQHandler 000001AA

Symbol: MCPWM_IRQHandler
   Definitions
      At line 437 in file startup.s
   Uses
      At line 107 in file startup.s
      At line 401 in file startup.s

MemManage_Handler 0000019C

Symbol: MemManage_Handler
   Definitions
      At line 337 in file startup.s
   Uses
      At line 63 in file startup.s
      At line 338 in file startup.s

NMI_Handler 00000198

Symbol: NMI_Handler
   Definitions
      At line 327 in file startup.s
   Uses
      At line 61 in file startup.s
      At line 328 in file startup.s

Num_ingredients 0000017C

Symbol: Num_ingredients
   Definitions
      At line 320 in file startup.s
   Uses
      At line 145 in file startup.s
Comment: Num_ingredients used once
PLL0_IRQHandler 000001AA

Symbol: PLL0_IRQHandler
   Definitions
      At line 423 in file startup.s
   Uses
      At line 93 in file startup.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 387 in file startup.s

PLL1_IRQHandler 000001AA

Symbol: PLL1_IRQHandler
   Definitions
      At line 439 in file startup.s
   Uses
      At line 109 in file startup.s
      At line 403 in file startup.s

PWM1_IRQHandler 000001AA

Symbol: PWM1_IRQHandler
   Definitions
      At line 416 in file startup.s
   Uses
      At line 86 in file startup.s
      At line 380 in file startup.s

PendSV_Handler 000001A6

Symbol: PendSV_Handler
   Definitions
      At line 360 in file startup.s
   Uses
      At line 73 in file startup.s
      At line 361 in file startup.s

QEI_IRQHandler 000001AA

Symbol: QEI_IRQHandler
   Definitions
      At line 438 in file startup.s
   Uses
      At line 108 in file startup.s
      At line 402 in file startup.s

RIT_IRQHandler 000001AA

Symbol: RIT_IRQHandler
   Definitions
      At line 436 in file startup.s
   Uses
      At line 106 in file startup.s
      At line 400 in file startup.s

RTC_IRQHandler 000001AA

Symbol: RTC_IRQHandler
   Definitions
      At line 424 in file startup.s
   Uses
      At line 94 in file startup.s
      At line 388 in file startup.s

Replace_ID 000000C8

Symbol: Replace_ID



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 262 in file startup.s
   Uses
      At line 184 in file startup.s
      At line 202 in file startup.s

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 141 in file startup.s
   Uses
      At line 60 in file startup.s
      At line 142 in file startup.s
      At line 143 in file startup.s

SPI_IRQHandler 000001AA

Symbol: SPI_IRQHandler
   Definitions
      At line 420 in file startup.s
   Uses
      At line 90 in file startup.s
      At line 384 in file startup.s

SSP0_IRQHandler 000001AA

Symbol: SSP0_IRQHandler
   Definitions
      At line 421 in file startup.s
   Uses
      At line 91 in file startup.s
      At line 385 in file startup.s

SSP1_IRQHandler 000001AA

Symbol: SSP1_IRQHandler
   Definitions
      At line 422 in file startup.s
   Uses
      At line 92 in file startup.s
      At line 386 in file startup.s

SVC_Handler 000001A2

Symbol: SVC_Handler
   Definitions
      At line 351 in file startup.s
   Uses
      At line 70 in file startup.s
      At line 352 in file startup.s

Sort 0000007E

Symbol: Sort
   Definitions
      At line 221 in file startup.s
   Uses
      At line 180 in file startup.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 201 in file startup.s

SysTick_Handler 000001A8

Symbol: SysTick_Handler
   Definitions
      At line 364 in file startup.s
   Uses
      At line 74 in file startup.s
      At line 365 in file startup.s

TIMER0_IRQHandler 000001AA

Symbol: TIMER0_IRQHandler
   Definitions
      At line 408 in file startup.s
   Uses
      At line 78 in file startup.s
      At line 372 in file startup.s

TIMER1_IRQHandler 000001AA

Symbol: TIMER1_IRQHandler
   Definitions
      At line 409 in file startup.s
   Uses
      At line 79 in file startup.s
      At line 373 in file startup.s

TIMER2_IRQHandler 000001AA

Symbol: TIMER2_IRQHandler
   Definitions
      At line 410 in file startup.s
   Uses
      At line 80 in file startup.s
      At line 374 in file startup.s

TIMER3_IRQHandler 000001AA

Symbol: TIMER3_IRQHandler
   Definitions
      At line 411 in file startup.s
   Uses
      At line 81 in file startup.s
      At line 375 in file startup.s

UART0_IRQHandler 000001AA

Symbol: UART0_IRQHandler
   Definitions
      At line 412 in file startup.s
   Uses
      At line 82 in file startup.s
      At line 376 in file startup.s

UART1_IRQHandler 000001AA

Symbol: UART1_IRQHandler



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 413 in file startup.s
   Uses
      At line 83 in file startup.s
      At line 377 in file startup.s

UART2_IRQHandler 000001AA

Symbol: UART2_IRQHandler
   Definitions
      At line 414 in file startup.s
   Uses
      At line 84 in file startup.s
      At line 378 in file startup.s

UART3_IRQHandler 000001AA

Symbol: UART3_IRQHandler
   Definitions
      At line 415 in file startup.s
   Uses
      At line 85 in file startup.s
      At line 379 in file startup.s

USBActivity_IRQHandler 000001AA

Symbol: USBActivity_IRQHandler
   Definitions
      At line 440 in file startup.s
   Uses
      At line 110 in file startup.s
      At line 404 in file startup.s

USB_IRQHandler 000001AA

Symbol: USB_IRQHandler
   Definitions
      At line 431 in file startup.s
   Uses
      At line 101 in file startup.s
      At line 395 in file startup.s

UsageFault_Handler 000001A0

Symbol: UsageFault_Handler
   Definitions
      At line 347 in file startup.s
   Uses
      At line 65 in file startup.s
      At line 348 in file startup.s

WDT_IRQHandler 000001AA

Symbol: WDT_IRQHandler
   Definitions
      At line 407 in file startup.s
   Uses
      At line 77 in file startup.s
      At line 371 in file startup.s



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols


exit 000000C6

Symbol: exit
   Definitions
      At line 257 in file startup.s
   Uses
      At line 228 in file startup.s
Comment: exit used once
exit_finder 0000011A

Symbol: exit_finder
   Definitions
      At line 311 in file startup.s
   Uses
      At line 301 in file startup.s
Comment: exit_finder used once
exit_loop_id 000000F8

Symbol: exit_loop_id
   Definitions
      At line 287 in file startup.s
   Uses
      At line 269 in file startup.s
Comment: exit_loop_id used once
external_loop 00000084

Symbol: external_loop
   Definitions
      At line 225 in file startup.s
   Uses
      At line 236 in file startup.s
Comment: external_loop used once
internal_loop 00000098

Symbol: internal_loop
   Definitions
      At line 233 in file startup.s
   Uses
      At line 245 in file startup.s
      At line 256 in file startup.s

internal_loop_id 000000DE

Symbol: internal_loop_id
   Definitions
      At line 274 in file startup.s
   Uses
      At line 280 in file startup.s
Comment: internal_loop_id used once
loop 00000100

Symbol: loop
   Definitions
      At line 298 in file startup.s
   Uses
      At line 306 in file startup.s
Comment: loop used once
loop_first_array 00000016



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols


Symbol: loop_first_array
   Definitions
      At line 153 in file startup.s
   Uses
      At line 178 in file startup.s
Comment: loop_first_array used once
loop_id 000000CE

Symbol: loop_id
   Definitions
      At line 266 in file startup.s
   Uses
      At line 286 in file startup.s
Comment: loop_id used once
loop_second_array 0000005E

Symbol: loop_second_array
   Definitions
      At line 192 in file startup.s
   Uses
      At line 199 in file startup.s
Comment: loop_second_array used once
63 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Heap_Size 00000000

Symbol: Heap_Size
   Definitions
      At line 42 in file startup.s
   Uses
      At line 46 in file startup.s
Comment: Heap_Size used once
Stack_Size 00000200

Symbol: Stack_Size
   Definitions
      At line 31 in file startup.s
   Uses
      At line 34 in file startup.s
Comment: Stack_Size used once
2 symbols
426 symbols in table
